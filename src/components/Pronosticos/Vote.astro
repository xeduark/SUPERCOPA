---
import type { User } from "@auth/core/types"
import { Image } from "astro:assets"
import { Votes, db, eq } from "astro:db"

import Typography from "@/components/Typography.astro"
import { BOXERS } from "@/consts/boxers"
import { COMBATS, REY_DE_LA_PISTA_ID } from "@/consts/combats"
import type { BoxerGender } from "@/types/Boxer"

const boxers = BOXERS

const getCombatById = (id: string) => {
	return COMBATS.find((combat) => combat.id === id)
}

const getBoxerGender = (boxerId: string): BoxerGender => {
	boxers.forEach((boxer) => {
		if (boxer.id === boxerId) return boxer.gender
	})
	return "masculino"
}

const getBoxerNames = (boxerIds: string[]): string[] => {
	return boxerIds.map((boxerId) => {
		const gender = getBoxerGender(boxerId)
		if (gender === "masculino") return `Boxeador ${boxerId}`
		return `Boxeadora ${boxerId}`
	})
}

const createImgRoute = (combateNumber: number, slug: string) => {
	return `https://cdn.lavelada.dev/boxers/vote/vote-${combateNumber}-${slug}.webp`
}

interface Props {
	user: User
}

const { user } = Astro.props as Props

const userId = user.id
const votes = await db
	.select({ combatId: Votes.combatId, voteId: Votes.voteId })
	.from(Votes)
	.where(eq(Votes.userId, userId))

const userVotes: Record<string, string> = {}
votes.forEach((vote) => {
	userVotes[vote.combatId] = vote.voteId
})
---

<section class="w-full">
	<Typography class="mb-8 text-center" color="white" as="h1" variant={"atomic-title"}
		>¡haz tu pronóstico!</Typography
	>
	<Typography class="mb-2 text-center" color="white" as="p" variant={"medium"}
		>Vota tus ganadores para cada combate haciendo clic encima de cada uno</Typography
	>

	<div class="flex items-center justify-center gap-4">
		<img class="size-12 rounded-full" src={user.image} alt={`Avatar del usuario ${user.name}`} />
		<div class="flex flex-col justify-center">
			<h4 class="-mb-1 text-lg font-bold">{user.name}</h4>
			<button id="logout" class="text-sm font-light text-accent hover:underline"
				>Cerrar sesión</button
			>
		</div>
	</div>

	<ul class="flex flex-col items-center justify-center">
		{
			COMBATS.map((combat, index) => {
				const combatData = getCombatById(combat.id)
				if (!combatData) return null

				const boxerNames = combatData ? getBoxerNames(combatData.boxers) : []
				const isKingOfTheHill = combatData.id === REY_DE_LA_PISTA_ID

				if (isKingOfTheHill) {
					return (
						<li class="not-completed relative flex w-full max-w-3xl flex-col justify-center md:justify-between">
							<Image
								width={combatData.titleSize[0]}
								height={combatData.titleSize[1]}
								transition:name={`title-image-${combat.id}`}
								loading="lazy"
								class:list={["pointer-events-none m-auto -mb-20 h-auto w-48 md:inset-0 md:w-64"]}
								src={`https://cdn.lavelada.dev/matches/title-${combat.id}.webp`}
								alt={`Fotografía del combate entre ${boxerNames.join(", ")}`}
								style="mask-image: linear-gradient(black 50%, transparent)"
							/>
							<ul class="grid grid-cols-5 gap-x-4">
								{combatData.boxers.map((boxer) => (
									<button
										class:list={[
											"vote-team king-team group relative max-w-60 saturate-0 transition hover:scale-110 hover:saturate-100",
											{ "is-voted": userVotes[combatData.id] === boxer },
										]}
										data-combat-id={combatData.id}
										data-vote-id={boxer}
										title={`Votar a ${boxer.replaceAll("-", " ")}`}
									>
										<div class="relative h-auto text-xs">
											<img
												class="h-auto max-h-96 w-full object-contain"
												src={`https://cdn.lavelada.dev/boxers/${boxer}-small.webp`}
												alt={`Fotografía de ${boxer.replaceAll("-", " ")}`}
												style="mask-image: linear-gradient(black 80%, transparent)"
											/>
											<span class="to-vote-text small">{boxer.replaceAll("-", " ")}</span>
											<span class="already-voted-text small">¡tu voto!</span>
										</div>
									</button>
								))}
							</ul>
						</li>
					)
				}

				const { teams, boxers } = combatData
				const [slug1, slug2] = teams ?? boxers
				const [image1, image2] = [
					{
						alt: () => slug1.replaceAll("-", " y "),
						src: createImgRoute(combatData.number, slug1),
					},
					{
						alt: () => {
							const splittedSlug2 = slug2.split("-")
							if (slug2 === "agustin-51") return slug2.replace("-", "")
							if (splittedSlug2.length > 2) return slug2.replace("-", " y ").replace("-", "")
							return slug2.replaceAll("-", " ")
						},
						src: createImgRoute(combatData.number, slug2),
					},
				]

				return (
					<li class="not-completed relative flex h-96 w-full max-w-3xl flex-row justify-center md:justify-between">
						<button
							class:list={[
								"vote-team group relative max-w-60 saturate-0 transition hover:scale-110 hover:saturate-100",
								{ "is-voted": userVotes[combatData.id] === slug1 },
							]}
							data-combat-id={combatData.id}
							data-vote-id={slug1}
							title={`Votar a ${image1.alt()}`}
						>
							<div class="relative h-auto">
								<img
									class="h-auto max-h-96 w-full object-contain"
									src={image1.src}
									alt={`Fotografía de ${image1.alt()}`}
									style="mask-image: linear-gradient(black 80%, transparent)"
								/>
								<span class="to-vote-text">¡voto por {image1.alt()}!</span>
								<span class="already-voted-text">¡tu voto!</span>
							</div>
						</button>
						<Image
							width={combatData.titleSize[0]}
							height={combatData.titleSize[1]}
							transition:name={`title-image-${combat.id}`}
							loading={index < 2 ? "eager" : "lazy"}
							class:list={[
								"pointer-events-none absolute inset-x-0 bottom-20 z-10 m-auto h-auto w-48 md:inset-0 md:w-80",
							]}
							src={`https://cdn.lavelada.dev/matches/title-${combat.id}.webp`}
							alt={`Fotografía del combate entre ${boxerNames.join(", ")}`}
							style="mask-image: linear-gradient(black 80%, transparent)"
						/>
						<button
							class:list={[
								"vote-team group relative max-w-60 saturate-0 transition hover:scale-110 hover:saturate-100",
								{ "is-voted": userVotes[combatData.id] === slug2 },
							]}
							data-combat-id={combatData.id}
							data-vote-id={slug2}
							title={`Votar a ${image2.alt()}`}
						>
							<div class="relative h-auto">
								<img
									class="h-auto max-h-96 w-full object-contain"
									src={image2.src}
									alt={`Fotografía de ${image2.alt()}`}
									style="mask-image: linear-gradient(black 80%, transparent)"
								/>
								<span class="to-vote-text">¡voto por {image2.alt()}!</span>
								<span class="already-voted-text">¡tu voto!</span>
							</div>
						</button>
					</li>
				)
			})
		}
	</ul>
</section>

<script>
	import { $ } from "@/lib/dom-selector"

	const { signOut } = await import("auth-astro/client")
	const $logout = $("#logout")

	if ($logout) $logout.onclick = () => signOut()
</script>

<script>
	import { $$ } from "@/lib/dom-selector"

	document.addEventListener("astro:page-load", () => {
		const $voteTeam = $$(".vote-team") as NodeListOf<HTMLButtonElement>

		$voteTeam.forEach(($button) => {
			const { combatId, voteId } = $button.dataset
			const $parent = $button.parentElement as HTMLElement

			// maneja evento onlick para cada botón
			$button.onclick = () => {
				let $previousVoted: HTMLElement | null

				// controla que no haya dos boxeadores votados
				if ($parent) {
					$previousVoted = $parent.querySelector(".is-voted")
					$previousVoted?.classList.remove("is-voted")
				}

				$button.classList.add("is-voted")

				// marca el combate como completado
				if ($parent && $button.className.includes("king-team")) {
					$parent.parentElement?.classList.remove("not-completed")
					$parent.parentElement?.classList.add("completed")
				} else {
					$parent.classList.remove("not-completed")
					$parent.classList.add("completed")
				}

				const rollbackUI = () => {
					$button.classList.remove("is-voted")
					$previousVoted?.classList.add("is-voted")

					window.toast({
						title: "Error al guardar el voto",
						location: "bottom-center",
						dismissible: false,
						type: "error",
						icon: true,
					})
				}

				fetch(`/api/votes/${combatId}`, {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({ voteId }),
				})
					.then((res) => {
						if (!res.ok) return rollbackUI()
						window.toast({
							title: "¡Voto registrado!",
							location: "bottom-center",
							dismissible: false,
							type: "success",
							icon: true,
						})

						// hace scroll hasta el siguiente combate en el DOM si esta sin completar
						if ($$(".not-completed").length > 0) {
							const nextCombat = $button.className.includes("king-team")
								? ($button.parentElement?.parentElement?.nextElementSibling as HTMLElement)
								: ($button.parentElement?.nextElementSibling as HTMLElement)
							if (nextCombat?.className.includes("not-completed"))
								nextCombat.scrollIntoView({ behavior: "smooth" })
						}
					})
					.catch(() => {
						rollbackUI()
					})
			}

			// marca el combate como completado si algun boxeador esta votado
			if ($button.className.includes("is-voted")) {
				// marca el combate como completado
				if ($parent && $button.className.includes("king-team")) {
					$parent.parentElement?.classList.remove("not-completed")
					$parent.parentElement?.classList.add("completed")
				} else {
					$parent.classList.remove("not-completed")
					$parent.classList.add("completed")
				}
			}
		})
	})
</script>

<style>
	.vote-team {
		& .to-vote-text,
		& .already-voted-text {
			@apply opacity-0 transition-opacity;
		}

		.to-vote-text {
			@apply text-accent;
		}

		&:hover .to-vote-text {
			@apply opacity-100;
		}

		&.is-voted {
			@apply pointer-events-none scale-105 saturate-100;

			& .to-vote-text {
				@apply hidden;
			}

			& .already-voted-text {
				@apply text-green-500 opacity-100;
			}
		}

		& span {
			@apply pointer-events-none absolute bottom-2 left-0 right-0 z-50 mx-auto font-atomic text-3xl;
			text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);

			&.small {
				@apply text-xl;
			}
		}
	}
</style>
